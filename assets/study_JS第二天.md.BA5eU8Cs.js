import{_ as s,c as a,o as n,a4 as p}from"./chunks/framework.D1FvBl6c.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"study/JS第二天.md","filePath":"study/JS第二天.md","lastUpdated":null}'),e={name:"study/JS第二天.md"},l=p(`<h2 id="js第二天" tabindex="-1">JS第二天 <a class="header-anchor" href="#js第二天" aria-label="Permalink to &quot;JS第二天&quot;">​</a></h2><h3 id="_1-运算符" tabindex="-1">1.运算符 <a class="header-anchor" href="#_1-运算符" aria-label="Permalink to &quot;1.运算符&quot;">​</a></h3><p><strong>赋值运算符</strong></p><blockquote><p>将等号右边的值赋值给左边，要求左边必须是一个容器。变量就是存储数据的容器，所以说声明一个变量存储数据。</p><p>对变量进行赋值的运算符 = += -= *= /=</p></blockquote><p><strong>一元运算符</strong></p><blockquote><p>JS运算符可以根据所需表达式的个数，分为一元运算符、二元运算符、三元运算符</p><p>一般是使用一元运算符进行自增运算，用于计数来使用</p><p>前置自增 ++i：先 + 1，再输出加完后 i 的值 先加后输出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let i = 10</span></span>
<span class="line"><span>console.log(++i + 1) // 12</span></span>
<span class="line"><span>let i = 1</span></span>
<span class="line"><span>console.log(i++ + ++i + i) // 1 + 3 + 3 = 7</span></span></code></pre></div><p>后置自增 i++：先输出当前 i 的值，再＋1 先输出后加</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let i = 10</span></span>
<span class="line"><span>console.log(i++ + 1) // 11</span></span></code></pre></div><p>单独使用 i++ 和 ++i 没有区别，除非是上述参与运算</p></blockquote><p><strong>比较运算符</strong></p><blockquote><p>大于 小于 大于或等于 小于或等于 两边是否值相等 两边值是否类型和值都相等 两边是否不全等</p><p>比较结果为boolean类型，只会得到 true 或 false 两种结果</p><p>相等运算符 == ： 判断左右两边是否值相等</p><p>三等运算符 === ：判断左右两边是否类型和值都相等</p><p>不等运算符 != ：判断左右两边是否不等</p><p>不全等运算符 !== ：判断左右两边是否不全等</p><p>= 单等是赋值 == 双等是判断 === 三等是全等</p><p>开发过程中判断是否相等，强烈建议使用 三等 和 不全等</p><p>不同类型之间比较，比较运算符会有隐式转换</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 双等运算符仅判断是否值相等</span></span>
<span class="line"><span>console.log(3 == 3) // true</span></span>
<span class="line"><span>// 比较运算符也会有隐式转换 &#39;3&#39;转换为3</span></span>
<span class="line"><span>console.log(3 == &#39;3&#39;) // true</span></span>
<span class="line"><span>// 三等运算符类型和值都要相等</span></span>
<span class="line"><span>console.log(3 === &#39;3&#39;) // false</span></span></code></pre></div></blockquote><blockquote><p>字符串比较，是比较字符对应的ACSII码</p><p>&#39;0&#39;对应 ASCII 值为 48 &#39; A&#39;对应 ASCII 值为 65 a&#39;对应 ASCII 值为 97</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log(&#39;0&#39; &lt; &#39;a&#39;) // true</span></span>
<span class="line"><span>console.log(&#39;aa&#39; &lt; &#39;ab&#39;) // true</span></span>
<span class="line"><span>console.log(&#39;aa&#39; &lt; &#39;aac&#39;) // true</span></span></code></pre></div></blockquote><blockquote><p>NaN 不等于任何值，包括它本身 涉及到 NaN，结果都是false</p><p>尽量不要比较小数，因为小数存在精度问题</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 小数存在精度问题，一般不相加也不比较</span></span>
<span class="line"><span>console.log(0.1 + 0.2) // 0.30000000000000004</span></span>
<span class="line"><span>console.log((0.1 + 0.2) === 0.3) // false</span></span>
<span class="line"><span>// 比较小数，一般进行放大转换为整数进行比较</span></span>
<span class="line"><span>console.log((0.1 * 10 + 0.2 * 10) === (0.3 * 10)) // true</span></span></code></pre></div></blockquote><p><strong>逻辑运算符</strong></p><blockquote><p>与 或 非 用来解决多重条件判断</p><p>与 &amp;&amp; 符号两边都为true，结果才是true，一假则假</p><p>或 || 符合两边有一个true，结果就为true，一真则真</p><p>非 ! 取反 真变假 假变真</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 逻辑与 一假则假</span></span>
<span class="line"><span>console.log(true &amp;&amp; true) // true</span></span>
<span class="line"><span>console.log(false &amp;&amp; true) // false</span></span>
<span class="line"><span>// 逻辑或 一真则真</span></span>
<span class="line"><span>console.log(true || false) // true</span></span>
<span class="line"><span>// 逻辑非 取反</span></span>
<span class="line"><span>console.log(!true) // false</span></span>
<span class="line"><span>console.log(!false) // true</span></span></code></pre></div></blockquote><p><strong>表达式和语句的区别</strong></p><p><strong>表达式</strong></p><blockquote><p>表达式是可以被求值的代码，JavaScript引擎会将其计算为一个结果。比如：i++，3+4，x = 7</p></blockquote><p><strong>语句</strong></p><blockquote><p>语句是一段可以执行的代码。比如：prompt() 函数可以弹出一个输入框，还有 if 语句，for 循环语句等。</p></blockquote><p><strong>区别</strong></p><blockquote><p>表达式可以被求值，所以一般可以写在赋值语句的右侧。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>表达式 num = 3 + 4</span></span></code></pre></div><blockquote><p>但是，语句不一定有值，比如，alert()函数，for，break等语句就不能用于赋值。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>语句 alert() 弹出对话框 console.log 控制台打印输出</span></span></code></pre></div><p><strong>程序三大流程控制语句</strong></p><p><strong>顺序结构</strong></p><blockquote><p>从上往下，依次执行每一行代码</p></blockquote><p><strong>分支结构</strong></p><blockquote><p>根据条件选择执行代码，可以让我们选择性的执行代码</p></blockquote><ul><li>if分支语句</li><li>三元运算符</li><li>switch多分支语句</li></ul><p><strong>循环结构</strong></p><blockquote><p>某段代码被重复执行</p></blockquote><p><strong>三元运算符</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 利用三元表达式进行数字补0</span></span>
<span class="line"><span>// 1.用户输入</span></span>
<span class="line"><span>let num = prompt(&#39;请输入一个数字：&#39;)</span></span>
<span class="line"><span>// 2.判断输出  小于10才补0</span></span>
<span class="line"><span>// 把三元表达式计算的值重新赋值给num</span></span>
<span class="line"><span>num = num &lt; 10 ? 0 + num : num</span></span>
<span class="line"><span>alert(\`数字为 \${num}\`)</span></span></code></pre></div><p><strong>switch多分支语句</strong></p><blockquote><p>switch case语句一般用于等值判断，不适合于区间判断，同时一般需要配合break关键字使用，没有break会造成case穿透。</p></blockquote><p><strong>循环三要素</strong></p><blockquote><p>变量起始值、循环终止条件、变量变化量</p></blockquote><blockquote><p>重复执行代码 / 在满足条件期间，重复执行某些代码</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for(变量起始值;终止条件;变量变化值){</span></span>
<span class="line"><span>		// 循环体</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>while(循环条件){</span></span>
<span class="line"><span>	// 要重复执行的代码(循环体)</span></span>
<span class="line"><span>	// 变化量</span></span>
<span class="line"><span>}</span></span></code></pre></div><blockquote><p>for循环的最大价值：循环数组</p></blockquote>`,40),t=[l];function o(i,c,u,r,d,g){return n(),a("div",null,t)}const k=s(e,[["render",o]]);export{h as __pageData,k as default};
