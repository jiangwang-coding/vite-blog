import{_ as t,c as e,o as l,a4 as a}from"./chunks/framework.D1FvBl6c.js";const x=JSON.parse('{"title":"面试准备指南：如何讲好一个项目","description":"","frontmatter":{},"headers":[],"relativePath":"study/如何讲好一个项目.md","filePath":"study/如何讲好一个项目.md","lastUpdated":null}'),o={name:"study/如何讲好一个项目.md"},i=a('<h1 id="面试准备指南-如何讲好一个项目" tabindex="-1">面试准备指南：如何讲好一个项目 <a class="header-anchor" href="#面试准备指南-如何讲好一个项目" aria-label="Permalink to &quot;面试准备指南：如何讲好一个项目&quot;">​</a></h1><h2 id="一、项目简述-30秒版本" tabindex="-1">一、项目简述(30秒版本) <a class="header-anchor" href="#一、项目简述-30秒版本" aria-label="Permalink to &quot;一、项目简述(30秒版本)&quot;">​</a></h2><blockquote><p>这是我在学校导师指导下参与开发的一个可视化内容管理平台(CMS)项目。该平台用于管理学校或实验室的数字内容资源，并基于用户行为实现个性化推荐，提升资料使用效率。项目采用Vue3 + Vite + TypeScript技术栈，具备权限控制、内容编辑、流程管理和智能推荐等功能。在项目开发过程中，我负责前端部分的系统架构设计、性能优化及主题功能开发；后端同学负责接口设计与数据服务。前后端紧密配合，通过接口文档和定期沟通保证功能的顺利实现和数据的准确交互，共同提升了平台的稳定性和用户体验。</p></blockquote><p>面试关键点：明确项目定位+你参与的深度。</p><h2 id="二、项目架构设计-讲技术深度" tabindex="-1">二、项目架构设计(讲技术深度) <a class="header-anchor" href="#二、项目架构设计-讲技术深度" aria-label="Permalink to &quot;二、项目架构设计(讲技术深度)&quot;">​</a></h2><p>可以从以下几个关键模块来组织叙述：</p><h4 id="_1-技术栈选择与理由" tabindex="-1">1.技术栈选择与理由 <a class="header-anchor" href="#_1-技术栈选择与理由" aria-label="Permalink to &quot;1.技术栈选择与理由&quot;">​</a></h4><ul><li><strong>Vue3+ TypeScript</strong>：组合式API更适合复杂业务组件复用，配合TS能在大型团队中提升可维护性。</li><li><strong>Vite</strong>：开发构建速度快、按需编译友好，且天然支持TS、模块懒加载。</li><li><strong>Pinia 替代 Vuex</strong>：更符合Vue3哲学，类型推导增强，API简洁。</li><li><strong>Monorepo+ pnpm</strong>：多包复用、模块解耦、利于组件库和工具函数的跨项目共用。</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>当时我们技术选型明确以性能、可维护性和现代化开发体验为导向，所以基于Vue3的组合式API配合Pinia的强类型能力，极大地减少了模板代码。构建工具上选用 Vite取代传统Webpack，使首次构建时间大幅降低。”</p></blockquote><h4 id="_2-权限系统设计-vue-router" tabindex="-1">2.权限系统设计(Vue-Router) <a class="header-anchor" href="#_2-权限系统设计-vue-router" aria-label="Permalink to &quot;2.权限系统设计(Vue-Router)&quot;">​</a></h4><ul><li>使用动态路由+权限白名单控制实现菜单/页面级访问控制。</li><li>在 router.beforeEach 中根据用户角色拉取权限配置，并动态挂载路由。</li><li>页面级+组件级权限控制(基于指令或配置项)。</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>“我们通过动态路由按角色生成菜单+指令控制按钮权限，实现了页面级和操作级双重拦截，使得未授权访问事件归零，权限配置实时生效。”</p></blockquote><h4 id="_3-状态管理重构-vuex→pinia" tabindex="-1">3.状态管理重构(Vuex→Pinia) <a class="header-anchor" href="#_3-状态管理重构-vuex→pinia" aria-label="Permalink to &quot;3.状态管理重构(Vuex→Pinia)&quot;">​</a></h4><ul><li>使用 Pinia 的模块化结构划分业务域(用户容、推荐等)。</li><li>支持类型推导，避免常见魔法字符串错误。</li><li>异步逻辑使用 store.action，并结合await 保证顺序执行。</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>“我们在项目中将Vuex重构为Pinia，在提升类型安全的同时，减少了模板代码。配合组合式API的写法，使逻辑更清晰、更适合多人协作。”</p></blockquote><h4 id="_4-性能优化实践" tabindex="-1">4.性能优化实践 <a class="header-anchor" href="#_4-性能优化实践" aria-label="Permalink to &quot;4.性能优化实践&quot;">​</a></h4><ul><li>Vite 分包+CDN静态资源托管</li><li>图片转WebP 降低加载成本</li><li>首屏懒加载，按需加载路由与组件</li><li>首页首屏渲染时间从3.2s优化到 1.6s</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>“我们做了首屏优化，包括Vite分包策略、图片转WebP、静态资源托管到CDN，这些措施将首页FCP缩短至1.6s左右。”</p></blockquote><h4 id="_5-axios封装-接口请求统一" tabindex="-1">5.Axios封装(接口请求统一) <a class="header-anchor" href="#_5-axios封装-接口请求统一" aria-label="Permalink to &quot;5.Axios封装(接口请求统一)&quot;">​</a></h4><ul><li>封装了基础 http 工具，支持泛型定义返回值类型。</li><li>集成请求拦截器：token 注入、loading管理、全局错误提示。</li><li>支持接口失败重试机制(最多重试3次)。</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>“我负责Axios二次封装工作，支持token注入和接口重试机制，异常信息统一交由message系统处理，保持用户体验一致性。”</p></blockquote><h4 id="_6-主题系统-暗黑-亮色模式" tabindex="-1">6.主题系统(暗黑/亮色模式) <a class="header-anchor" href="#_6-主题系统-暗黑-亮色模式" aria-label="Permalink to &quot;6.主题系统(暗黑/亮色模式)&quot;">​</a></h4><ul><li>使用 CSS变量进行主题切换。</li><li>localStorage持久化记录用户选择。</li><li>全局监听系统主题变化做自动适配。</li></ul><p><strong>面试建议说法：</strong></p><blockquote><p>我们基于CSS Variables实现主题切换功能.localStorage用于持久化保存。通过监听prefers-color-scheme 实现自动跟随系统。”</p></blockquote><h2 id="三、面试高频提问点-提前准备回答" tabindex="-1">三、面试高频提问点(提前准备回答) <a class="header-anchor" href="#三、面试高频提问点-提前准备回答" aria-label="Permalink to &quot;三、面试高频提问点(提前准备回答)&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">模拟问题</th><th>回答方向</th></tr></thead><tbody><tr><td style="text-align:left;">你在这个项目中具体负责什么?</td><td>说一说你主导或深入参与的模块</td></tr><tr><td style="text-align:left;">为什么用Pinia，不用Vuex?</td><td>强类型支持更好、API更简单</td></tr><tr><td style="text-align:left;">如何做组件/状态模块复用?</td><td>讲Monorepo下如何拆包</td></tr><tr><td style="text-align:left;">性能优化具体做了哪些？</td><td>首页FCP、按需加载、CDN</td></tr><tr><td style="text-align:left;">主题系统是怎么实现的?</td><td>变量+本地存储+响应式</td></tr><tr><td style="text-align:left;">如何保证代码质量?</td><td>使用 ESLint + Prettier + 类</td></tr></tbody></table><table tabindex="0"><thead><tr><th style="text-align:left;">模拟问题</th><th>回答示例（学生身份适配版）</th></tr></thead><tbody><tr><td style="text-align:left;">你在这个项目中具体负责什么？</td><td>“我独立负责前端核心模块开发，包括权限系统动态路由设计、Axios请求统一封装、主题换肤功能实现，并与后端同学协作完成接口联调。通过代码Review和性能优化，推动首屏加载速度提升50%。”</td></tr><tr><td style="text-align:left;">为什么用Pinia，不用Vuex？</td><td>“Pinia的TypeScript支持更友好，重构后用户模块的类型推导让代码提示更清晰，配合组合式API写法，代码量减少了30%。比如用户信息获取从Vuex的<code>commit</code>改为Pinia的<code>store.action</code>，逻辑更直观。”</td></tr><tr><td style="text-align:left;">如何做组件/状态模块复用？</td><td>“通过pnpm workspace将公共组件和工具函数拆成独立包，比如<code>@shared/ui</code>封装了表格和上传组件，跨模块复用率达40%。状态管理上，用户权限和推荐算法模块独立成Pinia store，方便其他页面调用。”</td></tr><tr><td style="text-align:left;">性能优化具体做了哪些？</td><td>“针对实验室网络环境一般的情况，使用Vite分包+CDN托管将首屏资源从1.8MB压缩至600KB，图片转WebP后体积减少65%。最终首屏FCP从3.2s优化到1.6s，Lighthouse评分从45提升到82。”</td></tr><tr><td style="text-align:left;">主题系统是怎么实现的？</td><td>“基于CSS变量定义主题色和间距，通过<code>document.documentElement.style.setProperty</code>动态切换变量。用户选择主题后存入localStorage，并监听系统主题变化自动切换，代码量仅200行但覆盖了95%的样式需求。”</td></tr><tr><td style="text-align:left;">如何保证代码质量？</td><td>“我们团队配置了ESLint+Prettier统一代码风格，我在提交前用Vitest对核心模块做单元测试（覆盖率80%）。比如权限路由的动态添加逻辑，写了10+测试用例覆盖不同角色场景，避免越权问题。”</td></tr><tr><td style="text-align:left;">遇到的最大挑战是什么？</td><td>“首次接触动态路由时，遇到刷新页面路由丢失的问题。通过查阅文档和调试，最终用<code>sessionStorage</code>缓存权限数据，并在路由守卫中静默校验接口，实现权限恢复。这个过程让我深入理解了Vue Router的运行机制。”</td></tr><tr><td style="text-align:left;">有做过用户反馈优化吗？</td><td>“实验室导师反馈表格加载慢，我引入<code>vue-virtual-scroller</code>实现虚拟滚动，万级数据渲染帧率从12FPS提升到55FPS。同时增加导出进度条和取消按钮，优化了长时间等待的体验。”</td></tr><tr><td style="text-align:left;">前后端协作如何分工？</td><td>“我们每周和后端对齐接口文档，我用Apifox生成Mock数据独立开发。比如权限接口未完成时，先用Mock数据实现动态路由逻辑，后期联调仅需2小时就完成对接，保证项目进度。”</td></tr><tr><td style="text-align:left;">这个项目的技术收获？</td><td>“第一次完整实践Vue3技术栈，学会了用Monorepo管理复杂项目。比如封装Axios时，通过泛型和拦截器统一处理401跳转，代码复用性大幅提升。这些经验让我对工程化开发有了更深理解。”</td></tr></tbody></table>',33),r=[i];function d(n,s,u,c,h,p){return l(),e("div",null,r)}const _=t(o,[["render",d]]);export{x as __pageData,_ as default};
