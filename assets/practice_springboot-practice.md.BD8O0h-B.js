import{_ as a,c as e,o as r,a4 as o}from"./chunks/framework.D1FvBl6c.js";const u=JSON.parse('{"title":"这是实战案例界面","description":"","frontmatter":{},"headers":[],"relativePath":"practice/springboot-practice.md","filePath":"practice/springboot-practice.md","lastUpdated":null}'),t={name:"practice/springboot-practice.md"},s=o(`<h1 id="这是实战案例界面" tabindex="-1">这是实战案例界面 <a class="header-anchor" href="#这是实战案例界面" aria-label="Permalink to &quot;这是实战案例界面&quot;">​</a></h1><h2 id="springboot-mybatis大致操作" tabindex="-1">Springboot+MyBatis大致操作 <a class="header-anchor" href="#springboot-mybatis大致操作" aria-label="Permalink to &quot;Springboot+MyBatis大致操作&quot;">​</a></h2><h3 id="简单介绍" tabindex="-1">简单介绍 <a class="header-anchor" href="#简单介绍" aria-label="Permalink to &quot;简单介绍&quot;">​</a></h3><p>java后端主要实现发送请求,获取数据,处理数据,返回数据。<br> SpringBoot框架主要简化了SSM（spring+springmvc+mybatis）框架的使用.可以跟其他第三方插件进行集成。</p><h3 id="数据持久层框架" tabindex="-1">数据持久层框架 <a class="header-anchor" href="#数据持久层框架" aria-label="Permalink to &quot;数据持久层框架&quot;">​</a></h3><p>MyBatis框架主要实现对数据库进行相关操作，包括增删改查以及对jdbc连接数据库进行简化。</p><h3 id="配置环境依赖-集成插件" tabindex="-1">配置环境依赖（集成插件） <a class="header-anchor" href="#配置环境依赖-集成插件" aria-label="Permalink to &quot;配置环境依赖（集成插件）&quot;">​</a></h3><p>集成springmvc框架<br> 集成数据库连接依赖<br> 集成druid实现数据库连接池依赖<br> 集成Mybatis框架简化数据库操作<br> 集成lombok注解来简化java代码<br> spring-boot-starter-web，mybatis-spring-boot-starter ，mysql-connector-java（8.0），druid-spring-boot-starter ，lombok</p><h3 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h3><h4 id="编写实体类-user" tabindex="-1">编写实体类 User <a class="header-anchor" href="#编写实体类-user" aria-label="Permalink to &quot;编写实体类 User&quot;">​</a></h4><h4 id="编写实体类的接口-mapper层或者dao层-userdao" tabindex="-1">编写实体类的接口 mapper层或者dao层 UserDao <a class="header-anchor" href="#编写实体类的接口-mapper层或者dao层-userdao" aria-label="Permalink to &quot;编写实体类的接口 mapper层或者dao层   UserDao&quot;">​</a></h4><p>简单来说xxMapper或者xxDao就是数据交互层 对数据库操作或者叫做实现实体类的接口层</p><h4 id="关于注释" tabindex="-1">关于注释 <a class="header-anchor" href="#关于注释" aria-label="Permalink to &quot;关于注释&quot;">​</a></h4><p>默认 Java 方法输入 /** 回车会自动生成方法注释，并添加方法参数。</p><h4 id="关于注解的解释" tabindex="-1">关于注解的解释 <a class="header-anchor" href="#关于注解的解释" aria-label="Permalink to &quot;关于注解的解释&quot;">​</a></h4><p>实际上涉及到orm映射 简单来说就是数据库的一张表对应一个实体类<br> 此外实体类里面使用lombok插件注解，其实就是set方法和get方法的封装，实现快速生成生成set方法和get方法<br> 注解具体含义 @Data //set和get方法<br> @AllArgsConstructor //所有字段的构造方法。有参构造<br> @NoArgsConstructor //无参构造</p><h4 id="编写动态sql语句-即编写数据交互层接口对应的usermapper-xml文件" tabindex="-1">编写动态Sql语句 即编写数据交互层接口对应的UserMapper.xml文件 <a class="header-anchor" href="#编写动态sql语句-即编写数据交互层接口对应的usermapper-xml文件" aria-label="Permalink to &quot;编写动态Sql语句 即编写数据交互层接口对应的UserMapper.xml文件&quot;">​</a></h4><h4 id="映射头部文件" tabindex="-1">映射头部文件 <a class="header-anchor" href="#映射头部文件" aria-label="Permalink to &quot;映射头部文件&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;!DOCTYPE mapper</span></span>
<span class="line"><span>        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span>
<span class="line"><span>        &quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span>
<span class="line"><span>&lt;!--namespace：对应接口的名称 --&gt;</span></span>
<span class="line"><span>&lt;mapper namespace=&quot;com.example.springbootDemo1.dao.UserDao&quot;&gt;</span></span></code></pre></div><h4 id="编写工具类的封装返回结果类resultvo" tabindex="-1">编写工具类的封装返回结果类ResultVo <a class="header-anchor" href="#编写工具类的封装返回结果类resultvo" aria-label="Permalink to &quot;编写工具类的封装返回结果类ResultVo&quot;">​</a></h4><p>实际上就是后端写个类对数据封装返给前端</p><h4 id="编写业务层-userservice" tabindex="-1">编写业务层 UserService <a class="header-anchor" href="#编写业务层-userservice" aria-label="Permalink to &quot;编写业务层 UserService&quot;">​</a></h4><p>在这里添加各种功能</p><h4 id="编写业务层接口-userserviceimpl" tabindex="-1">编写业务层接口 UserServiceImpl <a class="header-anchor" href="#编写业务层接口-userserviceimpl" aria-label="Permalink to &quot;编写业务层接口 UserServiceImpl&quot;">​</a></h4><p>这里使用@Service注解 代表是业务层接口 将该类注入spring容器<br> 这里会调用数据库UserDao<br> 回到UserDao使用@Repository注解把数据库UserDao设置为仓库<br> 再回来 UserServiceImpl 使用 @Autowired 注解进行属性注入<br> 实际上就是xx功能的具体实现<br> 比如登录功能就是做功能判断,逻辑判断跳转对应状态。</p><h4 id="关于-repository注解的理解" tabindex="-1">关于@Repository注解的理解 <a class="header-anchor" href="#关于-repository注解的理解" aria-label="Permalink to &quot;关于@Repository注解的理解&quot;">​</a></h4><p>@Repository注解用于标识一个类是一个数据访问对象（DAO）的Repository。<br> 使用@Repository注解可以方便地实现数据访问对象，从而简化数据库操作。 例如，当有一个实体类（Entity）时，可以创建一个与之对应的Dao接口，并在该接口中定义各种数据库操作方法。<br> 然后，将这个接口标注为@Repository，Spring就会自动为其创建一个代理对象，从而实现数据访问对象的功能。</p><h4 id="编写控制器-usercontroller" tabindex="-1">编写控制器 UserController <a class="header-anchor" href="#编写控制器-usercontroller" aria-label="Permalink to &quot;编写控制器 UserController&quot;">​</a></h4><p>在这里就是对数据进行处理，实现xx功能url路径跳转</p><h4 id="启动类扫描" tabindex="-1">启动类扫描 <a class="header-anchor" href="#启动类扫描" aria-label="Permalink to &quot;启动类扫描&quot;">​</a></h4><p>最后，在springbootDemo1Application启动类扫描dao接口</p><h3 id="springboot-swagger大致操作" tabindex="-1">Springboot+Swagger大致操作 <a class="header-anchor" href="#springboot-swagger大致操作" aria-label="Permalink to &quot;Springboot+Swagger大致操作&quot;">​</a></h3><h4 id="简单介绍-1" tabindex="-1">简单介绍 <a class="header-anchor" href="#简单介绍-1" aria-label="Permalink to &quot;简单介绍&quot;">​</a></h4><p>前后端分离开发，后端需要编写接口说明文档，会耗费很多时间。<br> Swagger是一个用于生成服务器端的规范性文档，并且能够帮助我们进行测试的工具。<br> swagger2 实现api接口文档界面编写<br> 集成Swagger以及swagger-ui框架<br> 配置三个依赖springfox-swagger2，springfox-swagger-ui，swagger-bootstrap-ui</p><h4 id="编写配置类swaggerconfig" tabindex="-1">编写配置类SwaggerConfig <a class="header-anchor" href="#编写配置类swaggerconfig" aria-label="Permalink to &quot;编写配置类SwaggerConfig&quot;">​</a></h4><p>使用@Configuration注解标识SwaggerConfig类作为一个配置类<br> 使用Spring的@EnableSwagger2注解，用于启用Swagger2文档的支持<br> 当在Spring Boot项目中使用这个注解时，Swagger2的配置和相关的文档生成功能将被激活。<br> 这样，开发者就可以通过Swagger UI来访问和查看生成的API文档。<br> @Bean是一个注解，用于标识一个类或方法，表示它是一个Spring容器中的Bean。<br> Spring容器是一个包含Bean的容器，这些Bean可以被其他Bean依赖，从而实现对象之间的通信和协作<br> @Api注解 @Api(value = &quot;提供了用户登录、查询、删除、增加等相关的接口&quot;,tags = &quot;用户管理&quot;)<br> @ApiOperation()方法注解，说明接口方法的作用</p><h4 id="访问方式" tabindex="-1">访问方式 <a class="header-anchor" href="#访问方式" aria-label="Permalink to &quot;访问方式&quot;">​</a></h4><p><a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>:端口号/doc.html</p>`,38),i=[s];function n(l,p,h,c,b,d){return r(),e("div",null,i)}const m=a(t,[["render",n]]);export{u as __pageData,m as default};
