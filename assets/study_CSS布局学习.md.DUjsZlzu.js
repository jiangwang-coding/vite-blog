import{_ as t,c as o,o as e,a4 as a}from"./chunks/framework.D1FvBl6c.js";const m=JSON.parse('{"title":"CSS布局","description":"","frontmatter":{},"headers":[],"relativePath":"study/CSS布局学习.md","filePath":"study/CSS布局学习.md","lastUpdated":null}'),i={name:"study/CSS布局学习.md"},r=a('<h1 id="css布局" tabindex="-1">CSS布局 <a class="header-anchor" href="#css布局" aria-label="Permalink to &quot;CSS布局&quot;">​</a></h1><p><strong>定位</strong> 定位的概念就是它允许你定义一个元素相对于其他正常元素的位置，它应该出现在哪里，这里的其他元素可以是父元素，另一个元素甚至是浏览器窗口本身。还有就是浮动了，其实浮动并不完全算是定位，它的特性非常的神奇，以至于它在布局中被人广泛的应用。 <strong>position属性</strong> 六个属性值：static、relative、absolute、fixed、sticky和inherit。 偏移量top、right、bottom、left四个属性。 偏移量不会对static的元素起到作用。而margin，相对应的是盒子模型的外边距，它会对每个元素框起到作用，使得元素框与其他元素之间产生空白。 包含块就是最近一级外层元素position不为static的元素 <strong>一些常用定位的偏移</strong> relative：它的偏移是相对于原先在文档流中的位置 相对定位，相对原来默认位置进行偏移 absolute：它的偏移量是相对于最近一个position不是static的祖先元素的 绝对定位，相对最近的非static父元素偏移 fixed：它的偏移量是相对于视口的。</p><h3 id="尺寸" tabindex="-1">尺寸 <a class="header-anchor" href="#尺寸" aria-label="Permalink to &quot;尺寸&quot;">​</a></h3><p><strong>尺寸的单位</strong> 单位是一个来定义元素大小的相应参考 px：尺寸基本单位像素 百分比：百分比的参照物是父元素，50%相当于父元素width的50% rem：这个对于复杂的设计图相当有用，它是html的font-size的大小 em：它虽然也是一个相对的单位，相对于父元素的font-size，但是，并不常用，主要是计算太麻烦了。</p><blockquote><p>盒子模型：每个元素，都会形成一个矩形块，主要包括四部分：margin(外边距)+border(边框)+padding(内边距)+content(内容) 标准盒子模型：width的长度等于content的宽度； 而当将box-sizing的属性值设置成border-box时，盒子模型的width=border+padding+content的总和。 宽度默认的属性值是auto，这个属性值会使得内部元素的长度自动填充满父元素的width 但是，height的属性值也是默认的auto，为什么没有像width一样呢？ 其实，auto这个属性值表示的是浏览器自动计算。这种自动计算，需要一个基准，一般浏览器都是允许高度滚动的，所以，会导致一个问题——浏览器找不到垂直方向上的基准。 同样地道理也会被应用在margin属性上。相信如果考察居中时，水平居中你可能闭着眼睛都能写出来，但是垂直居中却绕着脑袋想。这是因为如果是块级元素水平居中只要将水平方向上的margin设置成auto就可以了。但是，垂直方向上却没有这么简单，因为你设置成auto时，margin为0。这个问题，还是需要仔细思考一下的。</p></blockquote><blockquote><p>浮动：为了实现文字环绕的特效 浮动的元素会在浮动层上面进行排布，而在原先文档流中的元素位置，会被以某种方式进行删除，但是还是会影响布局。 浮动为什么会被使用在布局中呢？因为设置浮动后的元素会形成BFC（使得内部的元素不会被外部所干扰），并且元素的宽度也不再自适应父元素宽度，而是适应自身内容。这样就可以，轻松地实现多栏布局的效果。 浮动元素，其实对于布局来说，是特别危险的。因为你可能这一块做过浮动，但未做清除，那么造成高度塌陷的问题。</p></blockquote><p>清除浮动，最常用的方法有两种:</p><ul><li>overflow: 将父元素的overflow，设置成hidden。</li><li>after伪类：对子元素的after伪类进行设置。</li></ul><p><strong>网页的布局</strong> 两栏布局：一栏定宽，一栏自适应。这样做的好处是定宽的那一栏可以做广告，自适应的可以作为内容主体。 实现的方式：float + margin：</p><p>三栏布局 三栏布局，也是经常会被使用到的一种布局。 它的特点：两边定宽，然后中间的width是auto的，可以自适应内容，再加上margin边距，来进行设定。 三栏布局可以有4种实现方式，每种实现方式都有各自的优缺点。 1.使用左右两栏使用float属性，中间栏使用margin属性进行撑开，注意的是html的结果 2.使用position定位实现，即左右两栏使用position进行定位，中间栏使用margin进行定位 3.使用float和BFC配合圣杯布局 4.flex布局</p><p><strong>移动端适配</strong> 比较适合的方案是媒体查询和flex弹性盒子布局 如果你需要一张网页能够在PC和移动端都能按照不同的设计稿显示出来，那么你需要做的就是去设置媒体查询。 媒体查询的css标识符是@media 媒体类型 all， 所有媒体 braille 盲文触觉设备 embossed 盲文打印机 print 手持设备 projection 打印预览 screen 彩屏设备 speech ‘听觉’类似的媒体类型 tty 不适用像素的设备 tv 电视</p><p>媒体查询的主要原理：它像是给整个css样式设置了断点，通过给定的条件去判断，在不同的条件下，显示不同的样式。手机端的尺寸在750px，而PC端则是大于750px的。</p><p>flex弹性盒子</p><p>块级作用域：是指由一对花括号 {} 包裹的代码块中定义的变量，这些变量在代码块外部是不可见的。</p>',14),s=[r];function n(l,p,c,d,_,h){return e(),o("div",null,s)}const u=t(i,[["render",n]]);export{m as __pageData,u as default};
