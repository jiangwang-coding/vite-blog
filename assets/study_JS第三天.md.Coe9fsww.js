import{_ as s,c as n,o as a,a4 as p}from"./chunks/framework.D1FvBl6c.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"study/JS第三天.md","filePath":"study/JS第三天.md","lastUpdated":null}'),e={name:"study/JS第三天.md"},t=p(`<p><strong>断点调试</strong></p><blockquote><p>所谓断点调试就是在顺序执行的代码中设置一个断开的位置，然后从这个断开的位置开始进行逐步人为执行代码。</p></blockquote><p><strong>循环的嵌套</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  &lt;script&gt;</span></span>
<span class="line"><span>  // for循环中文口诀：&quot;从几开始；到几结束；怎么变化&quot;</span></span>
<span class="line"><span>  // 页面打印五行五列的星星</span></span>
<span class="line"><span>  // 分析：</span></span>
<span class="line"><span>  // 1.利用双重for循环实现</span></span>
<span class="line"><span>  // 2.外循环控制打印行数，内循环控制每行打印几个也就是列数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 外循环控制打印行数</span></span>
<span class="line"><span>  // 内循环和换行打印都属于外循环的循环体</span></span>
<span class="line"><span>  // 满足循环条件就执行循环体内容，不满足循环条件就退出循环</span></span>
<span class="line"><span>  for (let i = 1; i &lt;= 5; i++) {</span></span>
<span class="line"><span>  // 内循环控制打印列数</span></span>
<span class="line"><span>  for (let j = 1; j &lt;= 5; j++) {</span></span>
<span class="line"><span>  document.write(&#39;⭐&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  // 内循环执行完毕，打印一个换行</span></span>
<span class="line"><span>  document.write(&#39;&lt;br&gt;&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  &lt;/script&gt;</span></span></code></pre></div><p><strong>数组</strong></p><blockquote><p>数组：(Array)是一种可以按顺序保存数据的数据类型，单个变量名可以保存多个数据。</p></blockquote><p>声明语法：let一个数组名等于中括号，中括号叫做数组字面量，或者以构造函数形式声明数组</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let 数组名 = [数据1,数据2,数据3...,数据n]</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>let arr = new Array(数据1,数据2,数据3...,数据n)</span></span></code></pre></div><p>数组是按顺序保存数据的，因此每个数据都有自己的编号，同时编号从0开始。</p><p>在数组中，数据的编号也叫做索引或者下标。</p><p>JS中数组可以存放任意类型的数据。</p><p>取值语法：数组名加下标</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>数组名[下标]</span></span></code></pre></div><p>通过下标获取数据</p><p>利用for循环遍历数组</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for(let i=0; i&lt; 数组名.length; i++) {</span></span>
<span class="line"><span>	 数组名.[i]</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>操作数组</strong></p><p>数组本质就是数据集合，操作数据就是 增 删 改 查</p><p><em>push方法数组末尾新增新元素 返回值是数组的新长度</em></p><p><em>unshift方法 数组开头新增新元素 返回值是数组的新长度</em></p><p><em>pop 删除数组最后一个元素 返回该元素的值</em></p><p><em>shift 删除数组第一个元素 返回该元素的值</em></p><p><em>splice 删除指定元素 splice(从哪删,删几个) 返回删除元素数组</em></p><p>查询数组数据：数组名[下标]</p><p>修改数组数据也就是对数组数据重新赋值：数组名[下标] = 新值</p><p>添加数组数据</p><ul><li>arr.push(新增数据) <strong><code>push()</code></strong> 方法将指定的元素添加到数组的末尾，并返回新的数组长度。</li><li>arr.unshift(新增数据) <strong><code>unshift()</code></strong> 方法将指定元素添加到数组的开头，并返回数组的新长度。</li></ul><p>删除数组数据</p><ul><li><p>arr.pop() <strong><code>pop()</code></strong> 方法从数组中删除<strong>最后一个</strong>元素，并返回该元素的值。此方法会更改数组的长度。</p></li><li><p>arr.shift() <strong><code>shift()</code></strong> 方法从数组中删除<strong>第一个</strong>元素，并返回该元素的值。此方法更改数组的长度。</p></li><li><p>arr.splice(start,deleteCount) arr.splice(起始位置,删除元素个数) deleteCount省略，默认删除到最后。</p></li></ul>`,30),l=[t];function i(o,c,r,d,g,u){return a(),n("div",null,l)}const b=s(e,[["render",i]]);export{m as __pageData,b as default};
